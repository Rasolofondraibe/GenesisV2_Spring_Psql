import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators,ReactiveFormsModule } from '@angular/forms';

import { [GnomClasse]Model } from '../model/[GnomClasse]Model';
import { [GnomClasse]Service } from '../service/[GnomClasse]Service';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
[importForeign]

@Component({
  selector: 'app-[nomClasse]',
  standalone: true,
  templateUrl: './[nomClasse].component.html',
  styleUrls: ['./[nomClasse].component.css'],
  imports : [CommonModule,ReactiveFormsModule]
})
export class [GnomClasse]Component {
  [nomClasse]Form!: FormGroup; // Définir un FormGroup pour gérer le formulaire
  liste[GnomClasse] !: Observable<[GnomClasse]Model[]>;
  [nomClasse] !: [GnomClasse]Model;
  [attributForeign]

  constructor(private formBuilder: FormBuilder, private [nomClasse]Service: [GnomClasse]Service,private router:Router[constructorForeign]) {
    this.[nomClasse]Form = this.formBuilder.group({
      [validator]
    });
  }

  ngOnInit() {
    this.getAll[GnomClasse]s();
    [appelFonctionForeign]
  }

  getAll[GnomClasse]s() {
      this.liste[GnomClasse] = this.[nomClasse]Service.getAll(); 
  }

  [fonctionForeign]

  resetForm(): void {
      this.[nomClasse]Form.reset(); // Réinitialiser le formulaire
  }

  submit() {
    if (this.[nomClasse]Form.valid) {
      [dataDeclaration]
      this.[nomClasse]Service.create([dataDeclarationArgument]).subscribe({
        next: (response) => {
          console.log('Create successful:', response); // Affichez la réponse renvoyée par la méthode create
          this.getAll[GnomClasse]s();
        },
        error: (error) => {
          console.error('Error:', error); // Affichez les éventuelles erreurs
        }
      });
    }
  }

  delete[GnomClasse](id:number | undefined):void{
        this.[nomClasse]Service.delete(id).subscribe({
          next: (response) => {
            console.log('delete successful:', response); 
            this.getAll[GnomClasse]s();
          },
          error: (error) => {
            console.error('Error:', error); 
          }
        });
  }

  versUpdate([nomClasse]:[GnomClasse]Model){
        this.[nomClasse] = [nomClasse];

        this.[nomClasse]Form.patchValue({
          [patchValue]
        });
  }


  update() {
      if (this.[nomClasse]Form.valid) {
        [dataDeclaration]
        const id = this.[nomClasse].[id];
        this.[nomClasse]Service.update(id,[dataDeclarationArgument]).subscribe({
          next: (response) => {
            console.log('Create successful:', response); // Affichez la réponse renvoyée par la méthode create
            this.getAll[GnomClasse]s();
          },
          error: (error) => {
            console.error('Error:', error); // Affichez les éventuelles erreurs
          }
        });
      }
    }
}
